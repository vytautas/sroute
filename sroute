#!/bin/sh
# Copyright (c) 2013, Vytautas Krakauskas
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Usage:
# 1. place this script in /etc/network/if-up.d and /etc/network/if-down.d
# 2. add options (defined bellow) to /etc/network/interfaces definitions

# sroute <direct|gw>
#   direct  - adds an exception rule for the network to lookup main table.
#   gw      - when packets are sent from ADDRESS assigned to this interface,
#             another routing table is used with a specified default route
#             (SROUTE_GW option).
# sroute_gw <gateway> (required for gw rule)
#   gateway	- default gateway to use for "SROUTE gw" rule. If not defined,
#             GATEWAY option is used. If SROUTE_GW and GATEWAY are not
#             defined, SROUTE is ignored.
# sroute_table <name> (optional)
#   name    - alternative routing table name. Default is to use table_IFNAME.
#             It will be defined in /etc/iproute2/rt_tables if neccessary.
# sroute_pref <number> (optional)
#	number  - preference number for the rule (lower is more preferred).
#             Default is 30000 for direct and 31000

[ "$METHOD" != "static" ] && exit 0
[ -z $IFACE ] && exit 0
[ -z $IF_ADDRESS ] && exit 0
[ -z $IF_NETMASK ] && exit 0
[ -z $IF_SROUTE ] && exit 0

verbose() {
	[ "$VERBOSITY" = "1" ] && echo "$*"
}

run() {
	verbose "$*"
	$*
}

# Turn IPv4 address into an integer number
inet_aton() {
	local IFS=.
	local m=32
	local num=0
	for i in $1; do
		m=$((m-8))
		num=$(( (i<<m) + num ))
	done
	echo $num
}

# Turn integer number into an IPv4 address
inet_ntoa() {
	local num=$1
	local ip=$((num>>24))
	for i in 16 8 0; do
		ip="$ip."$(( (num>>$i) & 0xff ))
	done
	echo $ip
}

# pseudo log
plog() {
	local exp=-1
	local x=$1
	local base=$2
	while [ $x -gt 0 ]; do
		exp=$((exp+1))
		x=$((x / base))
	done
	echo $exp
}

# pseudo exponent
pexp() {
	local base=$1
	local exp=$2
	local rez=1
	while [ $exp -gt 0 ]; do
		rez=$(($rez*$base))
		exp=$((exp-1))
	done
	echo $rez
}

# Turn network mask into prefix
# e.g. 255.255.254.0 -> 23
masktoprefix() {
	local mask=$1
	local prefix=$(( 32 - $(plog $(( 0xffffffff - $(inet_aton $mask) + 1 )) 2 ) ))
	echo $prefix
}

# Apply 16bit mask (derived from prefix) to an integer
mask16() {
	local elem=$1
	local prefix=$2
	if [ $prefix -le 0 ]; then
		echo -n 0
	elif [ $prefix -ge 16 ]; then
		echo -n $elem
	else
		local mask=$(( ~( $( pexp 2 $((16 - prefix)) ) -1 ) & 0xffff ))
		printf "%x" $(( 0x$i & $mask ))
	fi
}

# expand :: in an IPv6 address
expand6() {
	local addr=$1
	local IFS=:

	#number of groups of zeros compacted by ::
	local n=8
	for i in $addr; do
		[ ! -z $i ] && n=$((n-1))
	done

	local idx=0
	for i in $addr; do
		if [ -z $i ]; then
			# expand ::
			local z=$n
			while [ $z -gt 0 ]; do
				[ $idx -gt 0 ] && echo -n ":"
				echo -n "0"
				z=$((z-1))
				idx=$((idx+1))
			done
		else
			[ $idx -gt 0 ] && echo -n ":"
			echo -n $i
			idx=$((idx+1))
		fi
		[ $idx -eq 8 ] && break
	done
}

# Turn IPv6 ADDRESS and NETMASK into NETWORK-ADDRESS/PREFIX
getaddr() {
	local address=$1
	local netmask=$2
	local net=$(inet_ntoa $(( $(inet_aton $address) & $(inet_aton $netmask) )) )
	local prefix=$(masktoprefix $netmask)
	echo "$net/$prefix"
}

# Turn IPv6 ADDRESS and PREFIX into NETWORK-ADDRESS/PREFIX
getaddr6() {
	local addr=$(expand6 $1)
	local prefix=$2
	local IFS=:
	local idx=0
	local elem
	local p=$prefix
	# apply mask to each 16bit element
	for i in $addr; do
		elem=$(mask16 $i $p)
		p=$((p-16))
		[ $idx -gt 0 ] && echo -n ":"
		echo -n "$elem"
		idx=$((idx+1))
	done
	echo "/$prefix"
}

# Add a route table definition in /etc/iproute2/rt_tables
addtable() {
	local table=$1
	# find lowest available number
	ids=$(awk '/^[[:space:]]*[[:digit:]]+[[:space:]]+[[:alnum:]]+/ {print $1}' /etc/iproute2/rt_tables | sort -n)
	num=0
	for id in $ids; do
		if [ $id -gt $num ]; then
			break
		fi
		num=$((num+1))
	done
	if [ $num -gt 252 ] ; then
		echo "No free descriptors are available in /etc/iproute2/rt_tables" > /dev/stderr
		exit 1
	fi

	# add the definition
	verbose "Defining table $table in /etc/iproute2/rt_tables as number $num"
	echo "$num $table #added by sroute" >> /etc/iproute2/rt_tables
}

case "$PHASE" in
	post-up)
		cmd="add"
		break
		;;
	pre-down)
		cmd="del"
		break
		;;
	*)
		exit 0
		;;
esac

case "$IF_SROUTE" in
	direct)
		# rule preference (lower is more preferred)
		[ -z $IF_SROUTE_PREF ] && IF_SROUTE_PREF=30000

		if [ "$ADDRFAM" = "inet" ]; then
			addr=$(getaddr $IF_ADDRESS $IF_NETMASK)
			run ip rule $cmd to $addr pref $IF_SROUTE_PREF lookup main
		elif [ "$ADDRFAM" = "inet6" ]; then
			addr=$(getaddr6 $IF_ADDRESS $IF_NETMASK)
			run ip -6 rule $cmd to $addr pref $IF_SROUTE_PREF lookup main
		fi
		break
		;;
	gw)
		# use gateway option's value if sroute_gw option is not specified
		[ -z $IF_SROUTE_GW ] && [ ! -z $IF_GATEWAY ] && IF_SROUTE_GW=$IF_GATEWAY
		if [ -z $IF_SROUTE_GW ]; then
			verbose "ERROR: missing sroute_gw option"
			exit 0
		fi

		# if routing table name is not specified, use interface name
		[ -z $IF_SROUTE_TABLE ] && IF_SROUTE_TABLE="table_$IFACE"
		
		# check if table name is defined in /etc/iproute2/rt_tables
		grep -q "^[[:space:]]*[[:digit:]]\+[[:space:]]\+$IF_SROUTE_TABLE\>" /etc/iproute2/rt_tables || addtable $IF_SROUTE_TABLE

		# rule preference (lower is more preferred)
		[ -z $IF_SROUTE_PREF ] && IF_SROUTE_PREF=31000

		if [ "$ADDRFAM" = "inet" ]; then
			addr=$(getaddr $IF_ADDRESS $IF_NETMASK)
			run ip route $cmd $addr dev $IFACE table $IF_SROUTE_TABLE
			run ip route $cmd default via $IF_SROUTE_GW table $IF_SROUTE_TABLE
			run ip rule $cmd from $IF_ADDRESS pref $IF_SROUTE_PREF table $IF_SROUTE_TABLE
		elif [ "$ADDRFAM" = "inet6" ]; then
			addr=$(getaddr6 $IF_ADDRESS $IF_NETMASK)
			if [ $cmd != "del" ]; then
				# routes are destroyed by bringing the interface down. It might be brought down by ipv4 definition.
				run ip -6 route $cmd $addr dev $IFACE table $IF_SROUTE_TABLE
				run ip -6 route $cmd default via $IF_SROUTE_GW table $IF_SROUTE_TABLE
			fi
			run ip -6 rule $cmd from $IF_ADDRESS pref $IF_SROUTE_PREF table $IF_SROUTE_TABLE
		fi

		break
		;;
esac
